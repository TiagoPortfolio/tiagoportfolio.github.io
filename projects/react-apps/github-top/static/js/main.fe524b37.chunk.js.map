{"version":3,"sources":["refresh-button.svg","Components/TableLoader.js","Components/Table.js","Components/Button.js","Containers/TableContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Loader","_ref","totalColumns","random","Math","react_default","a","createElement","react_content_loader_es","height","width","speed","primaryColor","secondaryColor","Array","fill","map","column","index","x","y","rx","ry","key","TableLoader","_ref2","Fragment","e","i","TableLoader_Loader","Table","columns","data","isLoading","error","className","row","property","type","src","alt","Components_TableLoader","length","Button","id","name","clickHandler","onClick","refreshLogo","TableContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","updateTable","bind","assertThisInitialized","_this2","interval","setInterval","clearInterval","setState","prevState","objectSpread","_this$props","buttonDetails","tableName","Components_Button","assign","Components_Table","Component","DATE","lastMonthDate","Date","setMonth","getMonth","setDate","toISOString","split","getLastMonthDate","TOP_REPOS_URL","concat","TOP_USERS_URL","App","getTopReposFromLastMonth","getTopUsersFromLastMonth","topRepos","fetchArguments","fetchUrl","join","fetchData","items","item","description","stargazers_count","topUsers","promises","asyncToGenerator","regenerator_default","mark","_callee2","followers","wrap","_context2","prev","next","url","sent","abrupt","login","avatar_url","stop","_x","apply","arguments","Promise","all","fetch","method","headers","Accept","response","ok","Error","json","console","log","_context4","t0","message","Containers_TableContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe524b37.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/refresh-button.ffa7f36b.svg\";","import React from 'react';\r\nimport ContentLoader from 'react-content-loader';\r\n\r\nconst ROWS = 5;\r\nconst WIDTH = 1060;\r\n\r\nconst Loader = ({totalColumns}) => {\r\n  const random = Math.random() * (1 - 0.7) + 0.7;\r\n  return (\r\n    <ContentLoader\r\n      height={40}\r\n      width={WIDTH}\r\n      speed={2}\r\n      primaryColor=\"#d9d9d9\"\r\n      secondaryColor=\"#ecebeb\"\r\n    >\r\n      {Array(totalColumns)\r\n        .fill('')\r\n        .map((column, index) => {\r\n          return (\r\n            <rect\r\n              x={\r\n                (WIDTH * (1 / totalColumns + index * 0.5)) / 2 -\r\n                (100 * random) / 2\r\n              }\r\n              y=\"13\"\r\n              rx=\"6\"\r\n              ry=\"6\"\r\n              width={100 * random}\r\n              height=\"12\"\r\n              key={index}\r\n            />\r\n          );\r\n        })}\r\n\r\n      <rect x=\"0\" y=\"39\" rx=\"6\" ry=\"6\" width=\"1060\" height=\".3\" />\r\n    </ContentLoader>\r\n  );\r\n};\r\n\r\nconst TableLoader = ({totalColumns}) => (\r\n  <React.Fragment>\r\n    {Array(ROWS)\r\n      .fill('')\r\n      .map((e, i) => (\r\n        <Loader key={i} totalColumns={totalColumns} />\r\n      ))}\r\n  </React.Fragment>\r\n);\r\n\r\nexport default TableLoader;\r\n","import React from 'react';\r\nimport TableLoader from './TableLoader';\r\n\r\nconst Table = ({ columns, data, isLoading, error}) =>\r\n  <div className=\"table\">\r\n    <table>\r\n      <thead className=\"table-header\">\r\n        <tr>\r\n        {columns.map((column, index) => \r\n            <th key={index}>{column}</th>\r\n          )}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {!isLoading && error &&\r\n          <tr>\r\n            <td>{error}</td>\r\n          </tr>\r\n        }\r\n        {!isLoading &&\r\n          data.map((row, index) => \r\n            <tr key={index}>\r\n              {row.map((property, index) => \r\n                <td key={index}>\r\n                  {property.type === \"img\" ? (\r\n                    <img src={property.data} alt=\"User Avatar\" className=\"user_avatar\"/>\r\n                  ) : (\r\n                    property.data\r\n                  )}\r\n                </td>\r\n              )}\r\n            </tr>\r\n          )\r\n        }\r\n      </tbody>\r\n    </table>\r\n    {isLoading &&\r\n      <TableLoader totalColumns={columns.length}/>\r\n    }\r\n  </div>\r\n\r\n\r\nexport default Table;\r\n\r\n","import React from 'react';\r\nimport refreshLogo from '../refresh-button.svg';\r\n\r\nconst Button = ({id, className, name, clickHandler, isLoading}) => {\r\n  return (\r\n  <div id={id} className={className} onClick={clickHandler}>\r\n    <img src={refreshLogo} alt=\"Refresh\" className={\"button_logo \" + (isLoading ? \"spin\" : \"\")}/>\r\n    {!isLoading ? (\r\n      name\r\n    ) : (\r\n      \"Refreshing...\"\r\n    )}\r\n  </div>\r\n)};\r\n\r\nexport default Button;\r\n","import React, {Component} from 'react';\r\nimport Table from '../Components/Table';\r\nimport Button from '../Components/Button';\r\n\r\nconst UPDATE_TIME = 2 * 60 * 1000; // 2 minutes\r\n\r\nclass TableContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      data: [],\r\n      isLoading: true,\r\n    };\r\n\r\n    this.updateTable = this.updateTable.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateTable();\r\n    this.interval = setInterval(() => this.updateTable(), UPDATE_TIME);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  async updateTable() {\r\n    this.setState(prevState => ({\r\n      ...prevState,\r\n      isLoading: true\r\n    }));\r\n\r\n    const data = await this.props.updateTable();\r\n\r\n    if (data) {\r\n      this.setState(prevState => ({\r\n        ...prevState,\r\n        data,\r\n        isLoading: false\r\n      }));\r\n    } else {\r\n      this.setState(prevState => ({\r\n        ...prevState,\r\n        isLoading: false\r\n      }));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {columns, buttonDetails, tableName, error} = this.props;\r\n\r\n    return (\r\n      <div className=\"table_container\">\r\n        <div className=\"table_container_header\">\r\n          <h2>{tableName}</h2>\r\n          <Button\r\n            {...buttonDetails}\r\n            clickHandler={this.updateTable}\r\n            isLoading={this.state.isLoading}\r\n          />\r\n        </div>\r\n        <Table\r\n          columns={columns}\r\n          data={this.state.data}\r\n          isLoading={this.state.isLoading}\r\n          error={error}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableContainer;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport TableContainer from './Containers/TableContainer';\n\nconst GITHUB_API = \"https://api.github.com/\";\nconst TABLE_ROWS = 5;\nconst DATE = getLastMonthDate();\nconst TOP_REPOS_URL = `${GITHUB_API}search/repositories`\nconst TOP_USERS_URL = `${GITHUB_API}search/users`\n\n// Get last month date\nfunction getLastMonthDate() {\n  // First day of last month\n  let lastMonthDate = new Date();\n  lastMonthDate.setMonth(lastMonthDate.getMonth() - 1);\n  lastMonthDate.setDate(1);\n\n  // Split to get YYYY-MM-DD\n  return lastMonthDate.toISOString().split('T')[0];\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null\n    };\n\n    this.getTopReposFromLastMonth = this.getTopReposFromLastMonth.bind(this);\n    this.getTopUsersFromLastMonth = this.getTopUsersFromLastMonth.bind(this);\n  }\n\n  async getTopReposFromLastMonth() {\n    let topRepos = [];\n\n    // Request arguments\n    const fetchArguments = [\n      `q=created:>=${DATE}`,\n      \"sort=stars\",\n      \"order=desc\",\n      `per_page=${TABLE_ROWS}`\n    ];\n\n    // Build request URL\n    const fetchUrl = `${TOP_REPOS_URL}?${fetchArguments.join('&')}`;\n\n    const data = await this.fetchData(fetchUrl);\n\n    if (data) {\n      if (data.items) {\n        topRepos = data.items.map(item => [\n          {\n            data: item.id,\n            type: \"int\"\n          },\n          {\n            data: item.name,\n            type: \"string\"\n          },\n          {\n            data: item.description,\n            type: \"string\"\n          },\n          {\n            data: item.stargazers_count,\n            type: \"int\"\n          },\n        ]);\n      }\n    }\n\n    return topRepos;\n  }\n\n  async getTopUsersFromLastMonth() {\n    let topUsers = [];\n\n    // Request arguments\n    const fetchArguments = [\n      `q=created:>=${DATE}`,\n      \"sort=followers\",\n      \"order=desc\",\n      `per_page=${TABLE_ROWS}`\n    ];\n\n    // Build request URL\n    const fetchUrl = `${TOP_USERS_URL}?${fetchArguments.join('&')}`;\n\n    const data = await this.fetchData(fetchUrl);\n\n    if (data) {\n      if (data.items) {\n        const promises = data.items.map(async item => {\n          const {followers} = await this.fetchData(item.url);\n          return [\n            {\n              data: item.id,\n              type: \"int\"\n            },\n            {\n              data: item.login,\n              type: \"string\"\n            },\n            {\n              data: item.avatar_url,\n              type: \"img\"\n            },\n            {\n              data: followers,\n              type: \"int\"\n            },\n          ];\n        });\n        return Promise.all(promises);\n      }\n    }\n\n    return topUsers;\n  }\n\n  async fetchData(url) {\n    try {\n      const response = await fetch(url,\n        {\n          method: 'get',\n          headers: {\n            Accept: 'application/vnd.github.v3+json' // API v3 to guarantee response stability\n          }\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error('Something went wrong... Please try again later!');\n      } else {\n        this.setState((prevState) => ({\n          ...prevState,\n          error: null\n        }));\n\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.log(error);\n      console.log(error.message);\n      this.setState((prevState) => ({\n        ...prevState,\n        error: error.message\n      }));\n    }\n  }\n\n  render() {\n    const {\n      error\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <TableContainer\n          updateTable={this.getTopReposFromLastMonth}\n          columns={[\"ID\", \"Name\", \"Description\", \"Stars\"]}\n          tableName=\"Github Repositories With Most Stars of Last Month\"\n          buttonDetails={{\n            id: \"hot_repo\",\n            className: \"table_button\",\n            name: \"Refresh\"\n          }}\n          error={error}\n        />\n        <TableContainer\n          updateTable={this.getTopUsersFromLastMonth}\n          columns={[\"ID\", \"Login\", \"Avatar\", \"Followers\"]}\n          tableName=\"Most Active Users by Followers From Last Month\"\n          buttonDetails={{\n            id: \"prolific_users\",\n            className: \"table_button\",\n            name: \"Refresh\"\n          }}\n          error={error}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}