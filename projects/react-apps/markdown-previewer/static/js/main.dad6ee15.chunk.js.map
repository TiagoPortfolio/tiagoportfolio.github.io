{"version":3,"sources":["Editor.js","Previewer.js","PreviewerContainer.js","App.js","AppContainer.js","registerServiceWorker.js","index.js","logo.svg"],"names":["Editor","_ref","text","editorHandler","react_default","a","createElement","className","id","name","autoComplete","placeholder","value","type","onChange","Previewer","markdownText","dangerouslySetInnerHTML","PreviewerContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getMarkdownText","bind","assertThisInitialized","__html","marked","gfm","tables","breaks","sanitize","smartLists","langPrefix","src_Previewer","React","Component","App","handleEditorChange","src","logo","alt","src_Editor","src_PreviewerContainer","defaultText","AppContainer","state","join","e","setState","target","src_App_0","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","refresh","catch","error","ReactDOM","render","src_AppContainer","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.dad6ee15.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Editor = ({ text, editorHandler }) => (\r\n\t<div className=\"Editor-box\">\r\n\t\t<textarea\r\n\t\t\tid=\"editor\"\r\n\t\t\tname=\"editor\"\r\n\t\t\tautoComplete=\"on\"\r\n\t\t\tplaceholder=\"Add here your code...\"\r\n\t\t\tvalue={text}\r\n\t\t\ttype=\"text\"\r\n\t\t\tonChange={editorHandler}\r\n\t\t/>\r\n\t</div>\r\n);\r\n\r\nEditor.propTypes = {\r\n\ttext: PropTypes.string.isRequired,\r\n\teditorHandler: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Editor;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Previewer = ({ markdownText }) => (\r\n\t<div className=\"Previewer-box\">\r\n\t\t<div\r\n\t\t\tid=\"preview\"\r\n\t\t\tdangerouslySetInnerHTML={markdownText}\r\n\t\t/>\r\n\t</div>\r\n);\r\n\r\nPreviewer.propTypes = {\r\n\tmarkdownText: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Previewer;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport marked from \"marked\";\r\n\r\nimport Previewer from './Previewer';\r\n\r\nclass PreviewerContainer extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.getMarkdownText = this.getMarkdownText.bind(this);\r\n\t}\r\n\r\n\tgetMarkdownText() {\r\n\t\tlet rawMarkup = marked(this.props.text, {\r\n\t\t\tgfm: true,\r\n\t\t\ttables: true,\r\n\t\t\tbreaks: true,\r\n\t\t\tsanitize: true,\r\n\t\t\tsmartLists: true,\r\n\t\t\tlangPrefix: \"language-javascript\"\r\n\t\t});\r\n\t\treturn { __html: rawMarkup };\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn <Previewer markdownText={this.getMarkdownText()} />;\r\n\t}\r\n}\r\n\r\nPreviewerContainer.propTypes = {\r\n\ttext: PropTypes.string.isRequired\r\n};\r\n\r\nexport default PreviewerContainer;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Editor from './Editor';\r\nimport PreviewerContainer from './PreviewerContainer';\r\n\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nconst App = ({ text, handleEditorChange }) => (\r\n\t<div className=\"App\">\r\n\t\t<header className=\"App-header\">\r\n\t\t\t<h1 className=\"App-title\">Markdown Previewer</h1>\r\n\t\t\t<div className=\"App-react-app\">\r\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\t\t\t\t<h2 className=\"App-intro\">React App</h2>\r\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\t\t\t</div>\r\n\t\t</header>\r\n\t\t<div className=\"App-body\">\r\n\t\t\t<Editor text={text} editorHandler={handleEditorChange}/>\r\n\t\t\t<PreviewerContainer text={text} />\r\n\t\t</div>\r\n\t</div>\r\n);\r\n\r\nApp.propTypes = {\r\n\ttext: PropTypes.string.isRequired,\r\n\thandleEditorChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\n\r\nimport App from './App';\r\n\r\nconst defaultText = [\r\n\t'# Markdown Previewer',\r\n\t'## React App',\r\n\t'[**Tiago Portfolio**](https://tiagoportfolio.github.io)',\r\n\t'`multiLineCode` function:',\r\n\t'```\\nfunction multiLineCode(firstLine, lastLine) {\\n\\tif (firstLine == \\'```\\' && lastLine == \\'```\\') {\\n\\treturn multiLineCode;\\n\\t}\\n}\\n```',\r\n\t'> This is a very long line that will still be quoted properly when it wraps. Oh boy let\\'s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.',\r\n\t'1. And there are numbererd lists too.\\n1. Use just 1s if you want!\\n1. But the list goes on...\\n- Even if you use dashes or asterisks.\\n* And last but not least, let\\'s not forget embedded images:',\r\n\t'![React Logo](https://goo.gl/Umyytc)'\r\n];\r\n\r\nclass AppContainer extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\ttext: defaultText.join(\"\\n\")\r\n\t\t};\r\n\r\n\t\tthis.handleEditorChange = this.handleEditorChange.bind(this);\r\n\t}\r\n\r\n\thandleEditorChange(e) {\r\n\t\tthis.setState({\r\n\t\t\ttext: e.target.value\r\n\t\t})\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<App \r\n\t\t\t\ttext={this.state.text}\r\n\t\t\t\thandleEditorChange={this.handleEditorChange}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default AppContainer;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n              window.location.refresh(true);\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport AppContainer from './AppContainer';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<AppContainer />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}